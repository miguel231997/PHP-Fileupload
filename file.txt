File uploads are an essential aspect of many web applications, and PHP provides built-in mechanisms to handle them.

In this tutorial, we'll cover the following topics:

HTML Form for File Upload
PHP Server-Side Handling of File Uploads
Uploading Files with Restrictions (File Type and Size)
Moving Uploaded Files to a Specific Location
Handling Multiple File Uploads
Let's start with the HTML form for file upload:

HTML Form for File Upload:
Create an HTML form in your index.php file to allow users to upload files.
html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>File Upload Example</title>
</head>
<body>
    <h1>File Upload Example</h1>
    <form action="upload.php" method="post" enctype="multipart/form-data">
        <label for="file">Select a file:</label>
        <input type="file" name="file" id="file">
        <input type="submit" value="Upload">
    </form>
</body>
</html>
PHP Server-Side Handling of File Uploads:
Create a new PHP file named upload.php to handle the file upload on the server side.
php
Copy code
<?php
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Check if the file was uploaded without errors
    if (isset($_FILES['file']) && $_FILES['file']['error'] === UPLOAD_ERR_OK) {
        // Process the uploaded file
        $file_name = $_FILES['file']['name'];
        $file_tmp = $_FILES['file']['tmp_name'];
        $file_size = $_FILES['file']['size'];
        $file_type = $_FILES['file']['type'];

        echo "File name: $file_name<br>";
        echo "File size: $file_size bytes<br>";
        echo "File type: $file_type<br>";
    } else {
        echo "Error uploading file.";
    }
}
?>
Uploading Files with Restrictions (File Type and Size):
You can add restrictions to the file upload process to ensure that only specific file types and sizes are allowed.
php
Copy code
// Restrict allowed file types
$allowed_types = array('image/jpeg', 'image/png', 'application/pdf');

if (!in_array($_FILES['file']['type'], $allowed_types)) {
    echo "Error: Only JPEG, PNG, and PDF files are allowed.";
    exit;
}

// Restrict file size
$max_size = 2 * 1024 * 1024; // 2 MB

if ($_FILES['file']['size'] > $max_size) {
    echo "Error: File size exceeds the maximum allowed size (2MB).";
    exit;
}
Moving Uploaded Files to a Specific Location:
To store the uploaded file in a specific directory, create the directory if it doesn't exist and move the file there.
php
Copy code
$upload_path = 'uploads/';

// Create the uploads directory if it doesn't exist
if (!file_exists($upload_path)) {
    mkdir($upload_path, 0777, true);
}

// Move the uploaded file to the uploads directory
move_uploaded_file($file_tmp, $upload_path . $file_name);

echo "File uploaded successfully!";
Handling Multiple File Uploads:
To handle multiple file uploads, modify the HTML form to include the multiple attribute in the file input.
html
Copy code
<input type="file" name="file[]" id="file" multiple>
In the PHP server-side script, you can loop through the $_FILES['file'] array to handle each uploaded file.

php
Copy code
if (isset($_FILES['file']) && is_array($_FILES['file']['name'])) {
    foreach ($_FILES['file']['name'] as $key => $name) {
        $file_name = $_FILES['file']['name'][$key];
        $file_tmp = $_FILES['file']['tmp_name'][$key];
        $file_size = $_FILES['file']['size'][$key];
        $file_type = $_FILES['file']['type'][$key];

        // Process and move the file (similar to the previous examples)
    }
}
That's it! You now have a basic understanding of handling file uploads in PHP. Remember to add proper security measures, such as file type and size validation, to ensure that your application remains secure and robust.